pip install fastapi pydantic sqlalchemy psycopg2-binary uvicorn
project/
├── main.py
├── models.py
├── database.py
├── crud.py
├── schemas.py
├── utils.py
├── static/
└── tests/
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

DATABASE_URL = "postgresql://user:password@localhost/dbname"

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()
from sqlalchemy import Column, Integer, String, Date, ForeignKey
from sqlalchemy.orm import relationship
from .database import Base

class Institute(Base):
    __tablename__ = "institute"

    institute_id = Column(Integer, primary_key=True, index=True, autoincrement=True)
    institute_name = Column(String(100), unique=True, nullable=False)

class Course(Base):
    __tablename__ = "course"

    course_id = Column(Integer, primary_key=True, index=True, autoincrement=True)
    institute_id = Column(Integer, ForeignKey('institute.institute_id'), nullable=False)
    course_name = Column(String(100), nullable=False)

class Student(Base):
    __tablename__ = "student"

    student_id = Column(Integer, primary_key=True, index=True, autoincrement=True)
    institute_id = Column(Integer, ForeignKey('institute.institute_id'), nullable=False)
    course_id = Column(Integer, ForeignKey('course.course_id'), nullable=False)
    student_name = Column(String(100), nullable=False)
    joining_date = Column(Date, nullable=False)
from pydantic import BaseModel
from datetime import date
from typing import Optional

class InstituteCreate(BaseModel):
    institute_name: str

class CourseCreate(BaseModel):
    institute_id: int
    course_name: str

class StudentCreate(BaseModel):
    institute_id: int
    course_id: int
    student_name: str
    joining_date: date

class SearchResult(BaseModel):
    institute_name: str
    course_name: str
    student_name: str
    joining_date: date
from sqlalchemy.orm import Session
from . import models, schemas

def create_institute(db: Session, institute: schemas.InstituteCreate):
    db_institute = models.Institute(institute_name=institute.institute_name)
    db.add(db_institute)
    db.commit()
    db.refresh(db_institute)
    return db_institute

def get_institute_by_name(db: Session, name: str):
    return db.query(models.Institute).filter(models.Institute.institute_name.ilike(f"%{name}%")).all()

# Similarly, add CRUD functions for Course and Student.
from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.orm import Session
from . import crud, models, schemas
from .database import SessionLocal, engine

models.Base.metadata.create_all(bind=engine)
app = FastAPI()

# Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.post("/institute/", response_model=schemas.InstituteCreate)
def create_institute(institute: schemas.InstituteCreate, db: Session = Depends(get_db)):
    return crud.create_institute(db=db, institute=institute)

@app.get("/search/")
def search(query: str, db: Session = Depends(get_db)):
    result = []
    institutes = crud.get_institute_by_name(db, query)
    # similar queries for courses and students
    return result
CREATE PROCEDURE student_enrollment_report()
LANGUAGE plpgsql
AS $$
BEGIN
    -- SQL logic for report generation
END;
$$;
from fastapi import File, UploadFile
@app.post("/upload-photo/")
def upload_photo(student_id: int, file: UploadFile = File(...)):
    # Logic to save the file on the server
